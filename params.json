{
  "name": "Launchd-simple-api",
  "tagline": " Simple api for node to manage services via macosx launchd",
  "body": "# launchd-simple-api\r\n\r\nSimple API to manage services via macosx launchd\r\n\r\n# Install\r\n\r\n```sh\r\nnpm i @mh-cbon/launchd-simple-api\r\n```\r\n\r\n# Usage\r\n\r\n```js\r\nvar LaunchSimpleApi = require('@mh-cbon/launchd-simple-api')\r\n\r\nvar lsa = new LaunchSimpleApi()\r\n\r\n// launchctl list\r\nlsa.list(function (err, items) {\r\n  console.log(items)\r\n})\r\n\r\n// find the service file definition,\r\n// then convert it to a json object with plutil\r\nlsa.describe(\"serviceId\", function (err, info) {\r\n  console.log(info)\r\n})\r\n\r\n// convert given service file to a json object with plutil\r\nlsa.describeFile(\"/SystemLibrary/Myservice.plist\", function (err, info) {\r\n  console.log(info)\r\n})\r\n\r\n// find the service file definition,\r\n// then, launchctl load /the/service/file.plist\r\nlsa.load('fake', {disabled: false, force: false, domain: null, session:null}, function (err) {\r\n  err && console.error(err);\r\n})\r\n\r\n// launchctl load /the/service/file.plist\r\nvar opts = {disabled: false, force: false, domain: null, session:null}\r\nlsa.loadServiceFile('/SystemLibrary/Myservice.plist', opts, function (err) {\r\n  err && console.error(err);\r\n})\r\n\r\n// find the service file definition,\r\n// then, launchctl unload /the/service/file.plist\r\nlsa.unload('fake', {disabled: false, domain: null, session:null}, function (err) {\r\n  err && console.error(err);\r\n})\r\n\r\n// launchctl unload /the/service/file.plist\r\nvar opts = {disabled: false, domain: null, session:null}\r\nlsa.unloadServiceFile('/SystemLibrary/Myservice.plist', opts, function (err) {\r\n  err && console.error(err);\r\n})\r\n\r\n// Look up through each defaults macosx service definition directories\r\n// and try to find for a file named such [service name].plist\r\nlsa.findUnitFile('fake', function (err, list) {\r\n  console.log(list)\r\n})\r\n\r\n// Test validity of the given plist service definition file\r\n// plutil /SystemLibrary/Myservice.plist\r\nlsa.testUnitFile('/SystemLibrary/Myservice.plist', function (err) {\r\n  err && console.error(err);\r\n})\r\n\r\n// Convert given plist service file into a JSON object\r\n// plutil -convert json -o - /SystemLibrary/Myservice.plist\r\nlsa.convertUnitFile('/SystemLibrary/Myservice.plist', 'json', function (err, info) {\r\n  err && console.error(err);\r\n  console.log(info)\r\n})\r\n\r\n// Convert given JSON object into a valid plist content\r\n// plutil -convert json -o - - (< JSON object into stdin)\r\nlsa.convertJsonToPlist({some: 'object'}, function (err, info) {\r\n  err && console.error(err);\r\n  console.log(info)\r\n})\r\n\r\n// launhctl start serviceId\r\nlsa.start('serviceId', function (err) {\r\n  err && console.error(err);\r\n})\r\n\r\n// launhctl stop serviceId\r\nlsa.stop('serviceId', function (err) {\r\n  err && console.error(err);\r\n})\r\n\r\n// launhctl start serviceId\r\n// launhctl stop serviceId\r\nlsa.restart('serviceId', function (err) {\r\n  err && console.error(err);\r\n})\r\n\r\n// Find all service file definition for given options\r\n/*\r\ndomain === user         => ~/Library/LaunchAgents\r\ndomain === global\r\n   jobType === agent    => /Library/LaunchAgents\r\n   jobType === daemon   => /Library/LaunchDaemons\r\ndomain === system\r\n   jobType === agent    => /System/Library/LaunchAgents\r\n   jobType === daemon   => /System/Library/LaunchDaemons\r\n*/\r\nlsa.listUnitFiles({domain: 'global', jobType: 'agents'}, function (err, list) {\r\n  console.log(list)\r\n})\r\n```\r\n\r\n# Install a service\r\n\r\n```js\r\nvar service = {\r\n  domain: 'user',\r\n  plist: {\r\n    Label: 'fake',\r\n    ProgramArguments: [\r\n      '/Users/vagrant/node/node-v5.9.1-darwin-x64/bin/node',\r\n      '/Users/vagrant/wd/utils/fake-service.js'\r\n    ]\r\n  }\r\n}\r\nlsa.install(service, function (err, results) {\r\n  err && console.error(err);\r\n  var serviceFile = '/Users/vagrant/Library/LaunchAgents/fake.plist';\r\n  fs.readFile(serviceFile, function (err2, content){\r\n    err2 && console.error(err2);\r\n    console.log(content.toString())\r\n  })\r\n})\r\n\r\n// find the corresponding service file, then deletes it\r\nlsa.uninstall('fake', function (err, results) {\r\n  err && console.error(err);\r\n})\r\n\r\n// deletes given service file definition\r\nlsa.uninstallUnitFile('/Users/vagrant/Library/LaunchAgents/fake.plist', function (err, results) {\r\n  err && console.error(err);\r\n})\r\n```\r\n\r\n# Read more\r\n\r\n- http://launchd.info/\r\n- https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html\r\n- https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/launchctl.1.html\r\n- http://alvinalexander.com/mac-os-x/launchd-examples-launchd-plist-file-examples-mac\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}